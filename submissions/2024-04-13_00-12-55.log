Sandbox logs:
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a41ef117-2d3c-4e81-84e5-18d762bff36a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a41ef117-2d3c-4e81-84e5-18d762bff36a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 0
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4ab59089-fd4f-4a28-8f9e-bfb377cde267\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4ab59089-fd4f-4a28-8f9e-bfb377cde267\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b430fbce-169b-4462-87f5-df6102cc79d3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b430fbce-169b-4462-87f5-df6102cc79d3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d94f8b8c-e57c-4480-b9af-17978eec9246\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d94f8b8c-e57c-4480-b9af-17978eec9246\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5a439d96-9a7e-4cbc-b502-96cdb56bc1bd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5a439d96-9a7e-4cbc-b502-96cdb56bc1bd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c2a8d573-0398-4ef7-8495-e7b8f5c19cf0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c2a8d573-0398-4ef7-8495-e7b8f5c19cf0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2543b909-29ee-414a-af6a-d2fd1bb075fd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2543b909-29ee-414a-af6a-d2fd1bb075fd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"193a36b4-0133-4cef-b3ed-1485aa4c6c92\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"193a36b4-0133-4cef-b3ed-1485aa4c6c92\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"af10d37c-b1af-4409-8366-2e2ca2c7f1fb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"af10d37c-b1af-4409-8366-2e2ca2c7f1fb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"af8c46fe-2002-4e65-aeb1-d30cfc8048c3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"af8c46fe-2002-4e65-aeb1-d30cfc8048c3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"46a8f7b0-9032-416e-9ae3-4ccf8d55b824\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"46a8f7b0-9032-416e-9ae3-4ccf8d55b824\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"80a01a14-22dd-4773-a78e-0e07695a8fc3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"80a01a14-22dd-4773-a78e-0e07695a8fc3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"176f7f56-3b57-4b0d-b0c3-78a372069864\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"176f7f56-3b57-4b0d-b0c3-78a372069864\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d677ccff-d37a-44f8-b6f4-9d4650fe07a0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d677ccff-d37a-44f8-b6f4-9d4650fe07a0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"80d4cd71-ed92-44ef-bb6e-42835ecdf4b0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"80d4cd71-ed92-44ef-bb6e-42835ecdf4b0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"99cb75ca-277c-459b-a579-262df3313e29\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"99cb75ca-277c-459b-a579-262df3313e29\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fd025952-d44b-4678-a822-7991b22d95eb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fd025952-d44b-4678-a822-7991b22d95eb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"257bfe20-bb38-4987-b5ef-3b875484d06f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"257bfe20-bb38-4987-b5ef-3b875484d06f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1ed060cd-e408-40fa-b931-400703fd0421\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1ed060cd-e408-40fa-b931-400703fd0421\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d157d32f-90e6-4e44-80f8-b41c8501bae0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d157d32f-90e6-4e44-80f8-b41c8501bae0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"26ad58a9-5dc4-41a1-b58c-67eb745f00cc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"26ad58a9-5dc4-41a1-b58c-67eb745f00cc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"998a2f8a-9efe-483c-83e6-78e15d412fe3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"998a2f8a-9efe-483c-83e6-78e15d412fe3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5394a5d3-39a4-4287-bb56-d339e2c793fc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5394a5d3-39a4-4287-bb56-d339e2c793fc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"117f3a9e-a3b9-4a6a-9b97-5506b3abdd30\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"117f3a9e-a3b9-4a6a-9b97-5506b3abdd30\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2300
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"b7e46840-099e-48fb-baaf-54afefd4a5ec\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"b7e46840-099e-48fb-baaf-54afefd4a5ec\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2400
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"69338778-ec2b-489c-a6d5-3995d1619e8a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"69338778-ec2b-489c-a6d5-3995d1619e8a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2500
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"df2ad855-5349-435d-98c9-19bb919b930b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"df2ad855-5349-435d-98c9-19bb919b930b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2600
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"3886a421-c468-478b-8db9-440c79893de5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"3886a421-c468-478b-8db9-440c79893de5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2700
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"9e10abd2-71e0-4663-91dd-e173e985f339\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"9e10abd2-71e0-4663-91dd-e173e985f339\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2800
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"31adb072-732a-4549-8ba8-159152d9d819\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"31adb072-732a-4549-8ba8-159152d9d819\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2900
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"62b150f2-c281-4699-bba6-1d15ba143289\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"62b150f2-c281-4699-bba6-1d15ba143289\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 3000
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"fe817825-8cb1-45d6-8be6-40f8bab02ded\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"fe817825-8cb1-45d6-8be6-40f8bab02ded\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 3100
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"5acabdfb-9576-44fd-92b0-1e464f3901ab\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"5acabdfb-9576-44fd-92b0-1e464f3901ab\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 3200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ec015dfb-4c1e-4459-9ac4-ee7a5beb0075\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ec015dfb-4c1e-4459-9ac4-ee7a5beb0075\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9a7592a8-a962-4be8-960f-c556c86b0ff6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9a7592a8-a962-4be8-960f-c556c86b0ff6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"79c13371-d9d8-4c4d-905f-bab646068f8a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"79c13371-d9d8-4c4d-905f-bab646068f8a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e94b599c-79bb-4e9f-8aa8-71ece0bc93a2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e94b599c-79bb-4e9f-8aa8-71ece0bc93a2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"22708267-104f-4635-8a49-9521382ce70a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"22708267-104f-4635-8a49-9521382ce70a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9fdcd28f-b1b0-42fb-91c2-1f7dbb764e9b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9fdcd28f-b1b0-42fb-91c2-1f7dbb764e9b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ce2f7df2-b2b7-484a-93a6-b42f917d6e7b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ce2f7df2-b2b7-484a-93a6-b42f917d6e7b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"97b4d8c6-41a0-4d59-805b-29865d17201c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"97b4d8c6-41a0-4d59-805b-29865d17201c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b7576e39-fb84-4727-a19f-96ebe61e40e1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b7576e39-fb84-4727-a19f-96ebe61e40e1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9ea8903f-d74f-4417-a017-1b3b55949432\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9ea8903f-d74f-4417-a017-1b3b55949432\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"73fca696-2704-4aff-8c97-6d552f24ab56\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"73fca696-2704-4aff-8c97-6d552f24ab56\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ba7f01e4-d95e-4871-9662-8d68cc32e674\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ba7f01e4-d95e-4871-9662-8d68cc32e674\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"dadff337-565f-4f4a-bfc0-f932053353dd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"dadff337-565f-4f4a-bfc0-f932053353dd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"70488ab2-370e-4664-99da-83bf5ea6f9f9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"70488ab2-370e-4664-99da-83bf5ea6f9f9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"850f9387-735a-45fe-be8d-4ccbe4df4933\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"850f9387-735a-45fe-be8d-4ccbe4df4933\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1f90a2d3-f441-419a-9e55-c2a98d76bd5c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1f90a2d3-f441-419a-9e55-c2a98d76bd5c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"89c66f4a-470c-49e2-be9b-5c9e1886e43e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"89c66f4a-470c-49e2-be9b-5c9e1886e43e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c5327a10-c26d-4bca-973a-160f759b6028\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c5327a10-c26d-4bca-973a-160f759b6028\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"42aab069-1b97-4e4c-9613-8805f61add99\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"42aab069-1b97-4e4c-9613-8805f61add99\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a41d2ea3-5311-4100-9d4c-3dbc2797ef4d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a41d2ea3-5311-4100-9d4c-3dbc2797ef4d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"bfee2151-9f93-4ef9-b057-08a158e07518\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"bfee2151-9f93-4ef9-b057-08a158e07518\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"43de8860-d866-4034-b40d-08dbbd52c6f8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"43de8860-d866-4034-b40d-08dbbd52c6f8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b30d3459-8354-4485-be41-6c1352c33163\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b30d3459-8354-4485-be41-6c1352c33163\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a3ddc58b-4c58-4883-8ca8-9ec7d17b8b06\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a3ddc58b-4c58-4883-8ca8-9ec7d17b8b06\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ecc9e9f0-46a5-438e-a9fe-eeeceadf316e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ecc9e9f0-46a5-438e-a9fe-eeeceadf316e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"290a2bdc-b87d-4bdb-aae8-05d389429cf1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"290a2bdc-b87d-4bdb-aae8-05d389429cf1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5b4b1f06-a9fa-44cb-a143-487298bc513a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5b4b1f06-a9fa-44cb-a143-487298bc513a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"aba675c2-9d30-4fd9-a5f6-2c79f2e00213\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"aba675c2-9d30-4fd9-a5f6-2c79f2e00213\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5ccebad4-e9e7-4b05-ab08-79a2e1533498\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5ccebad4-e9e7-4b05-ab08-79a2e1533498\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d37c4f57-b290-4c3e-95f9-4ae2dd411585\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d37c4f57-b290-4c3e-95f9-4ae2dd411585\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"38494334-b201-488f-a1cc-4a4491001e6f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"38494334-b201-488f-a1cc-4a4491001e6f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"04903777-2711-4a57-8124-d2abb507e07d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"04903777-2711-4a57-8124-d2abb507e07d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"47add9f1-505f-4275-a776-7a3ea8477a61\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"47add9f1-505f-4275-a776-7a3ea8477a61\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3f0db01e-fdb6-4847-a493-4def7cd8e8e7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3f0db01e-fdb6-4847-a493-4def7cd8e8e7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4ef6b57b-755a-48bc-b3ed-13adf4538be3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4ef6b57b-755a-48bc-b3ed-13adf4538be3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"8ef57aa1-d9e7-4288-b53c-adad1d1b2195\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"8ef57aa1-d9e7-4288-b53c-adad1d1b2195\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"11a5d468-d476-49e8-b315-8a5db3851f65\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"11a5d468-d476-49e8-b315-8a5db3851f65\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"921b3f81-316c-42ef-b621-8e6ea41938b4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"921b3f81-316c-42ef-b621-8e6ea41938b4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7217b2b9-082f-47c2-81bd-fd112d6e928a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7217b2b9-082f-47c2-81bd-fd112d6e928a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"dcbe4af4-f2eb-4bb0-a8b1-c322be2b6104\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"dcbe4af4-f2eb-4bb0-a8b1-c322be2b6104\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fe631f7c-b6a8-4a4b-85e2-35b47000b091\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fe631f7c-b6a8-4a4b-85e2-35b47000b091\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"29ef332e-07cb-4b77-9a15-2d07a6043619\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"29ef332e-07cb-4b77-9a15-2d07a6043619\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3ffceae3-5526-485e-bde9-84fce5810169\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3ffceae3-5526-485e-bde9-84fce5810169\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"790dfdb0-618a-417f-b046-cf3d853a2537\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"790dfdb0-618a-417f-b046-cf3d853a2537\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c780999e-9236-4375-ba38-7a538cdd428c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c780999e-9236-4375-ba38-7a538cdd428c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7ea1a7b4-a107-4d8e-a193-03ca8a41a6e8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7ea1a7b4-a107-4d8e-a193-03ca8a41a6e8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1bc2974a-b6db-4966-a560-e15ec8300d9b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1bc2974a-b6db-4966-a560-e15ec8300d9b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"159394fd-4af4-4daa-af7f-400ec727fcf3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"159394fd-4af4-4daa-af7f-400ec727fcf3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"47ace63a-0613-48c8-a908-16ab70d0e3fc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"47ace63a-0613-48c8-a908-16ab70d0e3fc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"54b25315-852f-4814-995b-70a74d31306e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"54b25315-852f-4814-995b-70a74d31306e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f4ddb188-ed5b-47f5-a471-af06daf91133\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f4ddb188-ed5b-47f5-a471-af06daf91133\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0d248778-8875-4825-bd48-3d36862f892a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0d248778-8875-4825-bd48-3d36862f892a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4432dce9-4844-4dda-91f4-582d9f6db80d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4432dce9-4844-4dda-91f4-582d9f6db80d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b8655587-1bab-42ab-a71c-fe9bf8a51d56\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b8655587-1bab-42ab-a71c-fe9bf8a51d56\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5fae14e6-a111-454d-80cf-ea90a13af343\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5fae14e6-a111-454d-80cf-ea90a13af343\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d53634b6-a3a7-4900-957e-6c4a8ca305f2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d53634b6-a3a7-4900-957e-6c4a8ca305f2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d99d53ff-bf27-48de-8b13-0290c9060ffd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d99d53ff-bf27-48de-8b13-0290c9060ffd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"bc48be3a-a26d-48d0-9b33-ecd3793b1c67\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"bc48be3a-a26d-48d0-9b33-ecd3793b1c67\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e56f8508-429b-4758-92a9-096a2efc484b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e56f8508-429b-4758-92a9-096a2efc484b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1eaaaa12-83e5-43f3-a28c-b6cd0d5eb5c6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1eaaaa12-83e5-43f3-a28c-b6cd0d5eb5c6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5c399a7c-6207-410c-96f7-0292b1120623\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5c399a7c-6207-410c-96f7-0292b1120623\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1c313dae-1ec3-4585-9251-b16d9b5ea356\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1c313dae-1ec3-4585-9251-b16d9b5ea356\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"266fce60-4802-4658-9185-8f70d91799e1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"266fce60-4802-4658-9185-8f70d91799e1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4549ac9a-981c-4100-9048-9ad692ed2bbc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4549ac9a-981c-4100-9048-9ad692ed2bbc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"792553af-bb71-4ad3-b7ae-6828f722a628\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"792553af-bb71-4ad3-b7ae-6828f722a628\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a872cfae-3265-4de5-9ff4-e377204b8931\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a872cfae-3265-4de5-9ff4-e377204b8931\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b243fd32-1254-4213-b4f9-72faa0250f12\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b243fd32-1254-4213-b4f9-72faa0250f12\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6c0ac544-2237-4511-95c4-0eaf03c9ce0d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6c0ac544-2237-4511-95c4-0eaf03c9ce0d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 10000
}
{
  "sandboxLog": "Lambda errors have reached maximum value for submission ed12504c-e582-4ef2-887e-16b659706435",
  "lambdaLog": null,
  "timestamp": 170371
}



Activities log:
day;timestamp;product;bid_price_1;bid_volume_1;bid_price_2;bid_volume_2;bid_price_3;bid_volume_3;ask_price_1;ask_volume_1;ask_price_2;ask_volume_2;ask_price_3;ask_volume_3;mid_price;profit_and_loss




Trade History:
null