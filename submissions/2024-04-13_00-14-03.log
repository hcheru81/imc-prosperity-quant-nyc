Sandbox logs:
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0d6d3ed0-8139-4f0e-b5b9-63f1de836851\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0d6d3ed0-8139-4f0e-b5b9-63f1de836851\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 0
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2f19bb39-5607-48c2-bc61-03db4d971ab4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2f19bb39-5607-48c2-bc61-03db4d971ab4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"299ff520-c686-46e8-9225-77b76eaa1783\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"299ff520-c686-46e8-9225-77b76eaa1783\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"715c5d1c-740f-4f5f-bea1-23eb80e6499e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"715c5d1c-740f-4f5f-bea1-23eb80e6499e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4828c84e-d073-4fdf-a9f2-fbef6cf0796b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4828c84e-d073-4fdf-a9f2-fbef6cf0796b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0448608e-3044-4947-835f-21269033c12a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0448608e-3044-4947-835f-21269033c12a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"323d02d4-2272-4f21-8b88-dc29859925be\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"323d02d4-2272-4f21-8b88-dc29859925be\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fa698cf9-c5d4-4143-b2c4-360b254f04f4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fa698cf9-c5d4-4143-b2c4-360b254f04f4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6ff4957f-bc51-4649-acf9-c600252479e5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6ff4957f-bc51-4649-acf9-c600252479e5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0b5a2e45-b450-4e82-a24c-20acd5f5410f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0b5a2e45-b450-4e82-a24c-20acd5f5410f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0e84de06-ada5-4b80-90f3-7b7f0e3dec9a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0e84de06-ada5-4b80-90f3-7b7f0e3dec9a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5f5639a3-43c7-4b95-a571-bd418358b226\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5f5639a3-43c7-4b95-a571-bd418358b226\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"46b30e91-a972-474b-94d7-40b74b1375c1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"46b30e91-a972-474b-94d7-40b74b1375c1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f6770edd-9a2b-46e0-9d90-aab5f983f958\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f6770edd-9a2b-46e0-9d90-aab5f983f958\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d8e53f9c-9242-4bee-97ac-81a80179047c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d8e53f9c-9242-4bee-97ac-81a80179047c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3de65cbe-1626-4e4d-a139-cd7324edb628\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3de65cbe-1626-4e4d-a139-cd7324edb628\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"95872f9f-ea3e-4c6f-935c-a5b4035fd42e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"95872f9f-ea3e-4c6f-935c-a5b4035fd42e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4af56471-e745-4af3-85ee-44285eb4533f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"4af56471-e745-4af3-85ee-44285eb4533f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a471eea1-8d3e-4ec9-a3b4-afb2f2b395e8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a471eea1-8d3e-4ec9-a3b4-afb2f2b395e8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6dc66b30-7351-4ae3-8535-f321b00ca638\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6dc66b30-7351-4ae3-8535-f321b00ca638\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 1900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"21f9c6b5-f1d8-4d23-990c-bbc8fdbe2395\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"21f9c6b5-f1d8-4d23-990c-bbc8fdbe2395\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b256c0de-f1c3-4ddb-bbd2-6990eed963c6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b256c0de-f1c3-4ddb-bbd2-6990eed963c6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"094673dd-2580-4045-8716-edcc2eba5878\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"094673dd-2580-4045-8716-edcc2eba5878\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"20a349b1-760d-4702-bacc-210cff8376fd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"20a349b1-760d-4702-bacc-210cff8376fd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 2300
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"0edb8de9-bbff-48fb-ba7c-33f50588af1b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"0edb8de9-bbff-48fb-ba7c-33f50588af1b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2400
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"4c80dcdd-c689-429d-b57d-80ade54660ac\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"4c80dcdd-c689-429d-b57d-80ade54660ac\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2500
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"b979de29-c2be-45cb-8871-0bccfea832d9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"b979de29-c2be-45cb-8871-0bccfea832d9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2600
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"d83ad8dc-3041-4af4-975c-88a9a3fda24a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"d83ad8dc-3041-4af4-975c-88a9a3fda24a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2700
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"60c6f3ff-fd76-4a9c-8ef0-b818f674a4eb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"60c6f3ff-fd76-4a9c-8ef0-b818f674a4eb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2800
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"392bd2ca-0424-4704-b41c-0678c3ea8b34\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"392bd2ca-0424-4704-b41c-0678c3ea8b34\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 2900
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"576482b6-54ad-4e8f-9695-b023794d1144\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"576482b6-54ad-4e8f-9695-b023794d1144\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 3000
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"39b84829-2348-42c0-9d58-5271d9739f7c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"39b84829-2348-42c0-9d58-5271d9739f7c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 3100
}
{
  "sandboxLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"23672bdf-f19b-47d9-b7d3-2e8bf77b122a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"\", \"errorType\": \"AssertionError\", \"requestId\": \"23672bdf-f19b-47d9-b7d3-2e8bf77b122a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 116, in get_orders\\n    assert buy_amount > 0\\n\"]}",
  "timestamp": 3200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d622f8f3-cc21-4098-95a3-b7335e311a9d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d622f8f3-cc21-4098-95a3-b7335e311a9d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c2ec16b8-743e-4d11-9dab-4ee3c83d1dd9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c2ec16b8-743e-4d11-9dab-4ee3c83d1dd9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"89ee5910-5d7a-46ff-b208-53d49ff66cbd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"89ee5910-5d7a-46ff-b208-53d49ff66cbd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"69783a7f-a827-49b8-9cde-d27ceed70947\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"69783a7f-a827-49b8-9cde-d27ceed70947\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a089c80d-dc5e-45a9-8bc9-009a0e3f3ed2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a089c80d-dc5e-45a9-8bc9-009a0e3f3ed2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"bd5b23bf-7c80-4648-8907-511aa91a9044\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"bd5b23bf-7c80-4648-8907-511aa91a9044\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a5d4dae0-a211-4aee-b1e2-f1da7d01e902\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a5d4dae0-a211-4aee-b1e2-f1da7d01e902\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 3900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9142263f-c108-4231-aa17-65f602816426\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9142263f-c108-4231-aa17-65f602816426\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f2be3fdc-6d8e-489d-ab84-d45b956d1192\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f2be3fdc-6d8e-489d-ab84-d45b956d1192\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d5e6d8a6-1f79-4e45-824c-d613d874a7a0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d5e6d8a6-1f79-4e45-824c-d613d874a7a0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7fd46613-2d90-43e5-9014-a70f2cdf855f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7fd46613-2d90-43e5-9014-a70f2cdf855f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6bd19fa3-5504-452f-ae23-116bb0e07c33\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6bd19fa3-5504-452f-ae23-116bb0e07c33\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3d85a5f1-2f46-4758-ba34-854a04d27abf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3d85a5f1-2f46-4758-ba34-854a04d27abf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d2218349-fe4d-48f6-98ea-664d8dd55783\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d2218349-fe4d-48f6-98ea-664d8dd55783\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"52df3f6b-21f5-4451-a946-bd4d99eb763c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"52df3f6b-21f5-4451-a946-bd4d99eb763c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e1afc397-0a72-4a43-aba5-18e5c0b6cabf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e1afc397-0a72-4a43-aba5-18e5c0b6cabf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c9af9222-dbda-4456-a93a-51b39f94fe6a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"c9af9222-dbda-4456-a93a-51b39f94fe6a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 4900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"43332c64-79b8-4602-be75-1c4b197e68c8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"43332c64-79b8-4602-be75-1c4b197e68c8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6d71aed6-e079-429b-93bb-945df9160904\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"6d71aed6-e079-429b-93bb-945df9160904\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1fc7a0ea-aed8-4ad7-9e2b-95476e15d76d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"1fc7a0ea-aed8-4ad7-9e2b-95476e15d76d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"941d9036-bfbb-4a7a-8816-d13ff583302a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"941d9036-bfbb-4a7a-8816-d13ff583302a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"66aa95fd-58c7-455b-bc28-85d3504c71a1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"66aa95fd-58c7-455b-bc28-85d3504c71a1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e5c57df0-16dd-4051-9688-652e2374fcf7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e5c57df0-16dd-4051-9688-652e2374fcf7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"25c28c8c-98de-45f8-95f7-4da017e287bb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"25c28c8c-98de-45f8-95f7-4da017e287bb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"aa91152c-a6ef-459f-a058-5280d78866d7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"aa91152c-a6ef-459f-a058-5280d78866d7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"602265c3-4b65-4c01-87f8-798835623f51\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"602265c3-4b65-4c01-87f8-798835623f51\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"73bf458e-3109-4ac1-9e31-d63b25df7107\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"73bf458e-3109-4ac1-9e31-d63b25df7107\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 5900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"82ecbf9a-8228-4260-8073-599640adbb26\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"82ecbf9a-8228-4260-8073-599640adbb26\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9ffc511e-b67a-4ca8-a0ef-ed086bb5a07e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9ffc511e-b67a-4ca8-a0ef-ed086bb5a07e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fcf98124-5a32-4834-9ce3-1a0092a4d328\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"fcf98124-5a32-4834-9ce3-1a0092a4d328\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"27ac123a-b9d5-404f-be97-754c92a9fadf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"27ac123a-b9d5-404f-be97-754c92a9fadf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"58fbc949-1a77-4a56-b8e3-bdea87c2db25\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"58fbc949-1a77-4a56-b8e3-bdea87c2db25\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"44416239-a119-4705-8398-131d0ec150d8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"44416239-a119-4705-8398-131d0ec150d8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"337c0b23-2efd-4cc0-8d7f-1655584a3723\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"337c0b23-2efd-4cc0-8d7f-1655584a3723\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ae966494-b80c-4dd1-8117-5a3f9150cdca\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ae966494-b80c-4dd1-8117-5a3f9150cdca\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3a47e2c3-7135-4ad3-8905-23a4f4918c82\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"3a47e2c3-7135-4ad3-8905-23a4f4918c82\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b35b8b32-041e-4707-ba7d-940b985d87dc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b35b8b32-041e-4707-ba7d-940b985d87dc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 6900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"240913c1-a62f-480a-a5de-c988faa5bdd6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"240913c1-a62f-480a-a5de-c988faa5bdd6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7465f179-0ad4-4fcb-8549-63563a83da3d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"7465f179-0ad4-4fcb-8549-63563a83da3d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"714e731d-1850-42c9-9ef9-03c28b9b6b20\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"714e731d-1850-42c9-9ef9-03c28b9b6b20\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f7d871e3-d071-40ea-8c03-830ace8014b1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f7d871e3-d071-40ea-8c03-830ace8014b1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"cc37c7fd-6390-4922-9062-4a897cfdbdde\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"cc37c7fd-6390-4922-9062-4a897cfdbdde\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"223d6cc4-1ab3-43dc-b9c1-89b3873ba2b5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"223d6cc4-1ab3-43dc-b9c1-89b3873ba2b5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0a68d877-bf92-43f9-af21-f63207cee9a5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0a68d877-bf92-43f9-af21-f63207cee9a5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"caefddc8-2c03-4907-927b-b5e09ed4d78f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"caefddc8-2c03-4907-927b-b5e09ed4d78f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e5717ae2-5f2c-4714-b7c3-0a1884daed27\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e5717ae2-5f2c-4714-b7c3-0a1884daed27\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5ef02130-fae2-4c19-8032-d0da9a8b6d70\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"5ef02130-fae2-4c19-8032-d0da9a8b6d70\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 7900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"675a35d9-bc5c-4908-916c-d43b201486ff\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"675a35d9-bc5c-4908-916c-d43b201486ff\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e86bf5ef-9609-4a5d-9f2b-be37934f70d6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e86bf5ef-9609-4a5d-9f2b-be37934f70d6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"01bbdd24-d020-4aab-98b5-8ad61b2c75f8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"01bbdd24-d020-4aab-98b5-8ad61b2c75f8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0610b093-8d77-45da-bfd0-2c7fc539bb10\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0610b093-8d77-45da-bfd0-2c7fc539bb10\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"410467a3-85d4-4bb5-8eaf-b3b20657e365\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"410467a3-85d4-4bb5-8eaf-b3b20657e365\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9e2dd17f-b090-4bf6-a414-aa8a3e8400ab\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"9e2dd17f-b090-4bf6-a414-aa8a3e8400ab\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a61aed18-b7da-464a-bcd6-aa96801c4303\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a61aed18-b7da-464a-bcd6-aa96801c4303\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0cbbf37e-44f5-46f2-b8d0-baeb29ee27fd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"0cbbf37e-44f5-46f2-b8d0-baeb29ee27fd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"dcd11ae1-4331-4b04-bc64-54ab7d52e132\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"dcd11ae1-4331-4b04-bc64-54ab7d52e132\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a347fd94-c556-4763-9c80-f72bd8caf305\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"a347fd94-c556-4763-9c80-f72bd8caf305\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 8900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"443b9da2-65c3-4314-bc06-416a97e4d512\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"443b9da2-65c3-4314-bc06-416a97e4d512\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9000
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2fe71f15-2cf0-482b-acb1-83a384ad8835\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2fe71f15-2cf0-482b-acb1-83a384ad8835\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9100
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2d4740b2-f99e-47a6-873c-605b175b99c3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"2d4740b2-f99e-47a6-873c-605b175b99c3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9200
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f5e6418a-ec22-43a7-b6d0-70306e329829\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f5e6418a-ec22-43a7-b6d0-70306e329829\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9300
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b4f804a7-23b3-43c1-ae95-db13bd86f1a3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"b4f804a7-23b3-43c1-ae95-db13bd86f1a3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9400
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e3f820fd-b9d8-4252-8236-41522340768c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"e3f820fd-b9d8-4252-8236-41522340768c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9500
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"cde28d87-1d07-476e-91ff-08315c31cde6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"cde28d87-1d07-476e-91ff-08315c31cde6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9600
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f57a9f2e-afdc-41c1-82e7-490eaa407d11\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"f57a9f2e-afdc-41c1-82e7-490eaa407d11\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9700
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ca5f8c44-9c75-49f0-a10f-8a009bb1f60e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ca5f8c44-9c75-49f0-a10f-8a009bb1f60e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9800
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ac31f9dc-ec0b-4961-be78-e0b88fff1538\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"ac31f9dc-ec0b-4961-be78-e0b88fff1538\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 9900
}
{
  "sandboxLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d85f84eb-9f32-477a-985e-53137b497de8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"must be real number, not NoneType\", \"errorType\": \"TypeError\", \"requestId\": \"d85f84eb-9f32-477a-985e-53137b497de8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 234, in run\\n    orders = self.get_orders(state, product_acceptable_price, product)\\n\", \"  File \\\"/var/task/trader.py\\\", line 85, in get_orders\\n    acceptable_buy_price = math.floor(acceptable_price)\\n\"]}",
  "timestamp": 10000
}
{
  "sandboxLog": "Lambda errors have reached maximum value for submission 12792276-a50d-44a0-9de6-b4ada7aba6fa",
  "lambdaLog": null,
  "timestamp": 170375
}



Activities log:
day;timestamp;product;bid_price_1;bid_volume_1;bid_price_2;bid_volume_2;bid_price_3;bid_volume_3;ask_price_1;ask_volume_1;ask_price_2;ask_volume_2;ask_price_3;ask_volume_3;mid_price;profit_and_loss




Trade History:
null